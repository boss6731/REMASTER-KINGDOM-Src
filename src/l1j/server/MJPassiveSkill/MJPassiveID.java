package l1j.server.MJPassiveSkill;

import java.util.HashMap;

public enum MJPassiveID {
	CRASH(1),
	FURY(2),
	SLAYER(3),
	ARMOR_GUARD(5),
	TITAN_ROCK(6),
	TITAN_BLITZ(7),
	TITAN_MAGIC(8),
	COUNTER_BARRIER_VETERAN(10),
	ARMOR_BREAK_DESTINY(11),
	DOUBLE_BREAK_DESTINY(12),
	DESPERADO_ABSOLUTE(13),
	THUNDER_GRAP_BRAVE(14),
	FOU_SLAYER_BRAVE(15),
	AURAKIA(16),
	DARK_HORSE(17),
	FINAL_BURN(18),
	STRIKER_GALE_PURE(19),
	INFERNO_SPIRIT(20),
	RESIST_ELEMENT(21),
	GLORY_EARTH(22),
	INFINITI_ARMOR(23),
	INFINITI_BULLET(24),
	INFINITI_DODGE(25),
	DAMASCUS(26),
	PARADOX(27),
	GROWS(28),
	RAGE(29),
	PHANTOM_REAPER(30),
	PHANTOM_DEATH(31),
	FLAME(32),
	INFINITI_BLOOD(33),
	SURVIVE(34),
	PANTERA_SHOCK(36),
	BLOODY_SOUL_NEW(38),
	IMMUNETOHARM_SAINT(39),
	DESTROY_PIER(40),
	DESTROY_HORROR(41),
	AURA_PASSIVE(42),
	REDUCTION_ARMOR_VETERAN(43),
	RISING_POSS(44),
	IllUSION_LICH_PASSIVE(45),
	IllUSION_DIAMONDGOLEM_PASSIVE(46),
	BURNING_SPIRIT_PASSIVE(47),
	DRESS_EVASION_PASSIVE(48),
	LUCIFER_DESTINY(49),
	MEISTER_ACCURACY(50),
	
	CRUEL_CONBICTION(52),
	PRESHER_DEATH_RECALL(53),
	DODGE_BREAK(55),
	MAELSTROM(56),
	DEADLY_STRIKE(57),
	VENGEANCE(58),
	TACTICAL_ADVANCE(59),
	INCREASE_RANGE(60),
	
	DRAGON_SKIN_PASS(61),
	SOLID_CARRIAGE_PASS(63),
	PRIDE_PASS(64),
	MEDITATION_BEYOND(65),
	SHADOW_ARMOR_PASS(66),
	SOLID_NOTE(67),
	RAMPAGE(68),
	RAST(69),
	MOVING_ACCELERATION_PASS(71),
	DISINTEGRATE_NEMESIS(76),
	HOLY_WALK_EVOLUTION(77),
	ADVANCE_SPIRIT_PA(78),
	SUMMONMONSER_GREATE(79),
	ARTERIAL_CIRCLE(80),
	PHANTOM_REQUEM(81),
	EMPIRE_OVERLORD(82),
	SHINING_ARMOR(83),
	MAJESTY(84),
	GIGANTIC(85),
	
	COUNTER_BARRIER_MASTER(86),
	SOUL_BARRIER_ARMOR(87),
	RAISING_WEAPON(88),
	STRIKER_GAIL_SHOT(89),
	DEMOLITION(90),
	BERSERK(91),
	TITAN_BEAST(92),
	TOMAHAWK_HUNTER(93),
	TRIPLE_BOOST(94),
	FINE_SIGHT(95),
	MORTAL_BODY(96),
	SHADOW_STEP_CHASER(97),
	BLIND_HIDDING_ASSASSIN(98),
	MOEBIUS(99),
	TYRANT_EXCUTION(100),
	CONQUEROR(101),
	FOU_SLAYER_FORCE(102),
	
	;
	
	private int m_id;
	MJPassiveID(int val){
		m_id = val;
	}
	
	public int toInt(){
		return m_id;
	}
	
	private static final HashMap<Integer, MJPassiveID> m_passivesId;
	static{
		m_passivesId = new HashMap<Integer, MJPassiveID>();
		MJPassiveID[] ids = MJPassiveID.values();
		for(MJPassiveID id : ids)
			m_passivesId.put(id.toInt(), id);
	}
	
	public static MJPassiveID fromInt(int passiveId){
		return m_passivesId.get(passiveId);
	}
}
